apiVersion: v1
kind: ConfigMap
metadata:
  name: foo-config
  namespace: staging
  labels:
    app: foo
    deployment: foo
data:
  app-config.json: '{"api":{"key":"stage-api-key-67890","endpoint":"https://api.example.com/v1","timeout":30,"retries":3},"cache":{"enabled":true,"ttl":300,"backend":"redis"},"database":{"url":"postgres://stage-db.example.com:5432/foo_stage","poolSize":20,"maxLifetime":3600},"logging":{"level":"info","format":"json"}}'
  logging.yaml: |-
    level: info
    handlers:
      console:
        class: StreamHandler
        level: info
        format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
  environment.txt: |-
    Log Level: info
    Retries: 3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: foo
  namespace: staging
  labels:
    app: foo
    deployment: foo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: foo
      deployment: foo
  template:
    metadata:
      labels:
        app: foo
        deployment: foo
    spec:
      containers:
        - name: foo
          image: foo:stage-v1.2.3-rc1
          envFrom: []
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          ports:
            - name: https
              containerPort: 8443
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
            - name: data
              mountPath: /var/lib/myapp/data
              readOnly: false
            - name: config
              mountPath: /etc/myapp/config
              readOnly: true
            - name: cache
              mountPath: /var/cache/myapp
              readOnly: false
            - name: projected-secrets
              mountPath: /var/secrets
              readOnly: true
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: foo-data
        - name: config
          configMap:
            name: foo-config
        - name: cache
          emptyDir:
            medium: Memory
            sizeLimit: 256Mi
        - name: projected-secrets
          projected:
            defaultMode: 256
            sources:
              - secret:
                  name: foo-stage-secrets
                  items:
                    - key: db-user
                      path: database/username
                    - key: db-password
                      path: database/password
              - configMap:
                  name: foo-stage-config
                  items:
                    - key: redis-url
                      path: config/redis-url
              - configMap:
                  name: stage-cluster-ca
                  items:
                    - key: ca.crt
                      path: config/cluster-ca.crt
              - downwardAPI:
                  items:
                    - path: pod/name
                      fieldRef:
                        fieldPath: metadata.name
                    - path: pod/namespace
                      fieldRef:
                        fieldPath: metadata.namespace
      securityContext:
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      serviceAccountName: foo
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
---
apiVersion: v1
kind: Service
metadata:
  name: foo
  namespace: staging
  labels:
    app: foo
    deployment: foo
spec:
  type: ClusterIP
  selector:
    app: foo
    component: backend
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 8443
  sessionAffinity: None
